<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mapper.userMapper">


  <!-- Mapper 작성 규칙 
    1.쿼리 id는 각 쿼리를 호출할 메소드의 이름과 동일하게 설정하는 것을 권장한다. 
    2. parameterType : 메소드가 쿼리로 전달하는 데이터의 타입이다. TypeAlias를 사용 할 수 있다. 
    3. resultType : 쿼리문이 메소드로 반환하는 값의 타입이다. <select> 태그만 작성 한다.
   -->

 <!-- 회원 가입 -->
  <insert id="userSignUp" parameterType="UserDTO">
     INSERT INTO user (account_id, user_name, nick_name, user_password, user_email, user_phone, created_at, salt, is_deleted)
     VALUES (#{accountId}, #{userName}, #{nickName}, #{userPassword}, #{userEmail}, #{userPhone}, NOW(), #{salt}, 0)
  </insert>
  
  <!-- 로그인(아이디, 비밀번호) -->
  <select id="selectLogin" parameterType="String" resultType="UserDTO">
    SELECT user_id, account_id, nick_name, user_name, user_password, user_email, salt
      FROM user
     WHERE account_id = #{accountId}
  </select>
  
  <!-- 아이디 중복 검사 -->
  <select id="countByAccountId" parameterType="String" resultType="java.lang.Integer">
    SELECT COUNT(*)
      FROM user
     WHERE account_id = #{accountId}
  </select>
  
  <!-- 비밀번호 변경 -->
  <update id="updatePasswordByAccountId" parameterType="map">
    UPDATE user
       SET user_password = #{userPassword},
           salt = #{salt}
     WHERE account_id = #{accountId}
  </update>
  
  <!-- 닉네임 중복 검사 -->
  <select id="countByNickName" parameterType="String" resultType="java.lang.Integer">
    SELECT COUNT(*)
      FROM user
     WHERE nick_name = #{userNickname}
  </select>
  
  <!-- 이메일 중복 검사 -->
  <select id="countByEmail" parameterType="String" resultType="java.lang.Integer">
    SELECT COUNT(*)
      FROM user
     WHERE LOWER(TRIM(user_email)) = LOWER(TRIM(#{userEmail}))
       AND is_deleted = 0
  </select>

  <!-- 아이디 찾기 -->  
  <select id="findAccountIdByNameAndEmail" parameterType="UserDTO" resultType="String">
    SELECT account_id
      FROM user
     WHERE user_name = #{userName} AND user_email = #{userEmail}
  </select>
  
  <!-- account 사용해서 user 정보 조회 -->
  <select id="getUserByAccountId" parameterType="String" resultType="UserDTO">
    SELECT user_id, account_id, user_name, nick_name, user_email, user_phone, created_at, updated_at, point, profile_image_key, user_password
      FROM user
     WHERE account_id = #{accountId}
  </select>
  
  <!-- userId를 이용해 user 정보 조회 -->
  <select id="getUserByUserId" parameterType="java.lang.Integer" resultType="UserDTO">
    SELECT user_id, account_id, user_password, salt, profile_image_key, provider
      FROM user
     WHERE user_id = #{userId} AND is_deleted = 0
  </select>
  
  <!-- 로그인 로그 저장 -->
  <insert id="insertLogStatus" parameterType="UserStatusDTO">
    INSERT INTO user_status (user_id, account_id, login_at)
    VALUES (#{userId}, #{accountId}, #{loginAt})
  </insert>
  
  <!-- 유저 정보 수정 -->
  <update id="updateUser" parameterType="map">
    UPDATE `user`
    SET user_name  = #{user.userName},
        user_email = #{user.userEmail},
        nick_name  = #{user.nickName}
    WHERE account_id = #{prevAccountId}
  </update>

  <update id="updateProfileImageKey">
    UPDATE user
    SET profile_image_key = #{profileImageKey}
    WHERE user_id = #{userId}
  </update>
  
  <!-- kakao로 로그인 한 id 조회 -->
  <select id="findByProvider" parameterType="map" resultType="UserDTO">
  SELECT *
    FROM user
   WHERE provider = #{provider}
     AND provider_id = #{providerId}
  LIMIT 1
</select>

<!-- kakao로 로그인 한 email 조회 -->
<select id="findByEmail" parameterType="string" resultType="UserDTO">
  SELECT * FROM user WHERE user_email = #{email} LIMIT 1
</select>
 
 <!-- 소셜 신규 가입 / 연동 / 프로필 갱신 -->
<insert id="insertSocialUser" parameterType="UserDTO"
        useGeneratedKeys="true" keyProperty="userId">
  INSERT INTO user (account_id, user_name, nick_name, user_email,
                    provider, provider_id, profile_image_key, created_at, updated_at)
  VALUES (#{accountId}, #{userName}, #{nickName}, #{userEmail},
          #{provider}, #{providerId}, #{profileImageKey}, NOW(), NOW())
</insert>

<update id="linkProvider" parameterType="UserDTO">
  UPDATE user
     SET provider = #{provider},
         provider_id = #{providerId},
         profile_image_key = #{profileImageKey},
         updated_at = NOW()
   WHERE user_id = #{userId}
</update>

<update id="updateSocialProfile" parameterType="UserDTO">
  UPDATE user
     SET nick_name = #{nickName},
         profile_image_key = #{profileImageKey},
         updated_at = NOW()
   WHERE user_id = #{userId}
</update>

<!-- 소프트 딜리트 (계정 아이디 뒤에 #ID, 이메일 NULL) -->
<update id="softDeleteUser" parameterType="int">
   UPDATE user
      SET is_deleted = 1,
          deleted_at = NOW(),
          account_id = CONCAT(account_id, '#', user_id),
          user_email = NULL,
          nick_name = CONCAT('탈퇴한회원', user_id)
    WHERE user_id = #{userId}
      AND is_deleted = 0
</update>

  <!-- nickName을 이용해 user 정보  조회 -->
  <select id="getUserByNickName" parameterType="String" resultType="UserDTO">
     SELECT user_id, account_id, user_name, nick_name
      FROM user
    WHERE nick_name = #{nickName}
  </select>

  
  
</mapper>